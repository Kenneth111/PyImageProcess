import numpy as np

def quantization(m_dct, flag):
    # 亮度分量量化表
    quant_y = np.array(
        [
                [16, 11, 10, 16, 24,  40,  51,  61],
                [12, 12, 14, 19, 26,  58,  60,  55],
                [14, 13, 16, 24, 40,  57,  69,  56],
                [14, 17, 22, 29, 51,  87,  80,  62],
                [18, 22, 37, 56, 68,  109, 103, 77],
                [24, 35, 55, 64, 81,  104, 113, 92],
                [49, 64, 78, 87, 103, 121, 120, 101],
                [72, 92, 95, 98, 112, 100, 103, 99]
        ])

    # 色度分量量化表
    quant_uv = np.array(
        [
                [17, 18, 24, 47, 99, 99, 99, 99],
                [18, 21, 26, 66, 99, 99, 99, 99],
                [24, 26, 56, 99, 99, 99, 99, 99],
                [47, 66, 99, 99, 99, 99, 99, 99],
                [99, 99, 99, 99, 99, 99, 99, 99],
                [99, 99, 99, 99, 99, 99, 99, 99],
                [99, 99, 99, 99, 99, 99, 99, 99],
                [99, 99, 99, 99, 99, 99, 99, 99]
        ])    
    if m_dct.shape != (8, 8):
        return -1
    if flag == 0:
        return np.divide(m_dct, quant_y)
    else:
        return np.divide(m_dct, quant_uv)

def in_quantization(m_dct, flag):
    # 亮度分量量化表
    quant_y = np.array(
        [
                [16, 11, 10, 16, 24,  40,  51,  61],
                [12, 12, 14, 19, 26,  58,  60,  55],
                [14, 13, 16, 24, 40,  57,  69,  56],
                [14, 17, 22, 29, 51,  87,  80,  62],
                [18, 22, 37, 56, 68,  109, 103, 77],
                [24, 35, 55, 64, 81,  104, 113, 92],
                [49, 64, 78, 87, 103, 121, 120, 101],
                [72, 92, 95, 98, 112, 100, 103, 99]
        ])

    # 色度分量量化表
    quant_uv = np.array(
        [
                [17, 18, 24, 47, 99, 99, 99, 99],
                [18, 21, 26, 66, 99, 99, 99, 99],
                [24, 26, 56, 99, 99, 99, 99, 99],
                [47, 66, 99, 99, 99, 99, 99, 99],
                [99, 99, 99, 99, 99, 99, 99, 99],
                [99, 99, 99, 99, 99, 99, 99, 99],
                [99, 99, 99, 99, 99, 99, 99, 99],
                [99, 99, 99, 99, 99, 99, 99, 99]
        ])    
    if m_dct.shape != (8, 8):
        return -1
    if flag == 0:
        return np.multiply(m_dct, quant_y)
    else:
        return np.multiply(m_dct, quant_uv)        